<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.api.mapper.PostgreMapper">
    <select id="selectBySQL" parameterType="String" resultType="java.util.LinkedHashMap">
        ${sql}
    </select>

    <delete id="deleteBySQL" parameterType="String">
        ${sql}
    </delete>

    <select id="selectStringListBySQL" parameterType="String" resultType="java.lang.String">
        ${sql}
    </select>

    <select id="fetchXmlSuiteDetailParameters" resultType="com.api.entities.testng.ReportAttributeInfo">
        select cs.component,cs.scenarios,cf.suite,cf.receiverAddress,cf.copyAddress,
        cf.enableMondo,cf.enableEmail,cf.dailyRunVersion
        from (
        select distinct component, string_agg(scenario,',') as scenarios from
        (
        select distinct component as component, scenario from auto_case
        <where>
            <if test="scenarios!=null and scenarios.length >0">
                and scenario in
                <foreach item="scenario" collection="scenarios" open="(" separator="," close=")">
                    '${scenario}'
                </foreach>
            </if>
            <if test="labels!=null and labels.length >0">
                and label in
                <foreach item="label" collection="labels" open="(" separator="," close=")">
                    '${label}'
                </foreach>
            </if>
            <if test="ids!=null and ids.length >0">
                and id in
                <foreach item="id" collection="ids" open="(" separator="," close=")">
                    ${id}
                </foreach>
            </if>
            <if test="sanityOnly != null and sanityOnly == 'true'">
                and is_sanity = cast('${sanity}' as boolean)
            </if>
        </where>
        union all
        (select distinct unnest(string_to_array(component_like,',')) as component, scenario from auto_case
        <where>
            <if test="scenarios!=null and scenarios.length >0">
                and scenario in
                <foreach item="scenario" collection="scenarios" open="(" separator="," close=")">
                    '${scenario}'
                </foreach>
            </if>
            <if test="labels!=null and labels.length >0">
                and label in
                <foreach item="label" collection="labels" open="(" separator="," close=")">
                    '${label}'
                </foreach>
            </if>
            <if test="ids!=null and ids.length >0">
                and id is null
            </if>
            <if test="sanity != null and sanity == 'true'">
                and is_sanity = cast('${sanity}' as boolean)
            </if>
            <if test="labels != null and (components == null or components.length == 0)">
                and component is null
            </if>
        </where>
        )
        ) as subquery
        <where>
            <if test="components!=null and components.length >0">
                and component in
                <foreach item="a" collection="components" open="(" separator="," close=")">
                    '${a}'
                </foreach>
            </if>
        </where>
        group by component
        ) cs
        join (
        select
        name as suite,
        component,
        "receiver_address" as receiverAddress,
        "copy_address" as copyAddress,
        "enable_mondo" as enableMondo,
        "enable_email" as enableEmail,
        "daily_run_version" as dailyRunVersion
        from auto_configuration
        <where>
            <if test="module!=null and module!=''"> and module = '${module}'</if>
        </where>
        ) cf ON cs.component = cf.component
    </select>

    <select id="auto_case" resultType="com.api.entities.TestAPIParameter">
        select distinct id,profile_name as profileName,parameter::jsonb,component as suite,
        component as component,is_sanity as isSanity,component_like as componentLike,
        description as testCaseDescription,issue_key as issueKey,method,path,is_e2e as isE2E,scenario,label
        from auto_case
        <where>
            <if test="ids!=null">
                and id in
                <foreach collection="ids" open="(" close=")" separator="," index="index" item="id">
                    ${id}
                </foreach>
            </if>
            <if test="labels!=null">
                and label in
                <foreach collection="labels" open="(" close=")" separator="," index="index" item="label">
                    '${label}'
                </foreach>
            </if>
            <if test="ids==null">
                and enable = true
            </if>
            <if test="component!=null">
                and ( component_like like '%${component}%' or component = '${component}' )
            </if>
            <if test="ids==null and sanityOnly == 'true'">
                and is_sanity = cast('${sanity}' as boolean)
            </if>
            <if test="scenario!=null">
                and scenario = '${scenario}'
            </if>
        </where>
    </select>

    <select id="auto_baseurl" resultType="com.api.entities.TestAPIParameter" flushCache="false">
        select service_name as serviceName, profile_name as profileName, base_url as baseURL from auto_baseurl
        <where>
            <if test="condition!=null">
                ${condition}
            </if>
        </where>
    </select>

    <select id="auto_system_variable" resultType="com.api.entities.lif.AutoSystemVariable" flushCache="false">
        select distinct component,component_like as componentLike,config_key as configKey, value from auto_system_variable
        <where>
            <if test="component!=null and component.length >0">
                and component = '${component}'
            </if>
            <if test="component_like!=null and component_like.length >0">
                and component_like = '${component_like}'
            </if>
            <if test="profile!=null and profile.length >0">
                and profile = '${profile}'
            </if>
            <if test="config_key!=null and config_key.length >0">
                and config_key = '${config_key}'
            </if>
            <if test="value!=null and value.length >0">
                and value = '${value}'
            </if>
        </where>
    </select>

    <select id="auto_endpoint" resultType="com.api.entities.TestAPIParameter" flushCache="false">
        select component,path,method,class_name as className,service_name as serviceName from auto_endpoint
    </select>

    <insert id="insertIntoAutoProgress">
        insert into auto_progress(runid,version_id,releaseversion,component,total_cases,task_status,passes,failures,skips,begin_time,end_time,run_by,label) values(
                                                                                                                                                                      '${runId}','${versionId}','${actualFixVersion}','${component}',${totalCases},#{taskStatus},0,0,0,#{beginTime},null,'${runBy}','${labels}')
    </insert>

    <update id="updateAutoProgress">
        update auto_progress set ${condition}
        where runid='${runId}' and component='${component}'
    </update>

    <insert id="insertIntoAutoResultTable">
        insert into auto_testingresult(runid,component) values( '${runId}','${component}')
    </insert>

    <update id="updateAutoResultTable">
        update auto_testingresult set suite_result=#{suiteResult}, insertDateTime=#{insertDateTime} where runid='${runId}' and component='${component}'
    </update>

    <select id="queryComponentGroupByModule" resultType="com.api.entities.auto.ComponentProgress">
        select re.group_id as groupId, re.run_id as runId, re.component, a.task_status::text as taskStatus from report_progress re
                                                                                                                    join auto_progress a on re.run_id = a.runid
        where re.group_id = (select group_id from report_progress where run_id = '${runId}')
    </select>

</mapper>